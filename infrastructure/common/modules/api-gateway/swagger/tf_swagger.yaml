swagger: '2.0'
info:
  version: '2021-02-22T11:39:56Z'
  title: Traveler_form_api
basePath: v1
schemes:
  - https
paths:
  /traveler-form:
    post:
      tags:
        - traveler form
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '201':
          description: 201 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        type: aws
        uri: >-
          arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${aws_region}:${aws_account}:function:traveler_form_create/invocations
        httpMethod: POST
        responses:
          default:
            statusCode: '201'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: >-
                $input.json('$.body') #set($statusCode =
                $input.path('$.statusCode')) #if($statusCode != 200)
                #set($context.responseOverride.status = $statusCode) #end
        requestTemplates:
          application/json: >-
            #set($allParams = $input.params()) { "body" : $input.json('$'),
            "params" : { "multiValueQueryStringParameters": {
                #foreach($key in $method.request.multivaluequerystring.keySet())
                "$key" : [
                  #foreach($val in $method.request.multivaluequerystring.get($key))
                 "$val"#if($foreach.hasNext),#end
                  #end
                  ]#if($foreach.hasNext),#end
                #end
              }
               #if($allParams.size() > 1),#end
            #foreach($type in $allParams.keySet())
                #set($params = $allParams.get($type))
            "$type" : {
                #foreach($paramName in $params.keySet())
                "$paramName" : "$util.escapeJavaScript($params.get($paramName))"
                    #if($foreach.hasNext),#end
                #end
            }
                #if($foreach.hasNext),#end
            #end }, "stage-variables" : { #foreach($key in
            $stageVariables.keySet()) "$key" :
            "$util.escapeJavaScript($stageVariables.get($key))"
                #if($foreach.hasNext),#end
            #end }, "context" : {
                "account-id" : "$context.identity.accountId",
                "api-id" : "$context.apiId",
                "api-key" : "$context.identity.apiKey",
                "caller" : "$context.identity.caller",
                "http-method" : "$context.httpMethod",
                "stage" : "$context.stage",
                "source-ip" : "$context.identity.sourceIp",
                "user" : "$context.identity.user",
                "user-agent" : "$context.identity.userAgent",
                "user-arn" : "$context.identity.userArn",
                "request-id" : "$context.requestId",
                "resource-id" : "$context.resourceId",
                "resource-path" : "$context.resourcePath"
                }
            }
        passthroughBehavior: when_no_templates
        contentHandling: CONVERT_TO_TEXT
    options:
      tags:
        - options
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Empty'
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        type: mock
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: '''*'''
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: when_no_match
securityDefinitions: null
definitions:
  Empty:
    type: object
    title: Empty Schema
tags:
  - name: traveler form
    description: Allow to create or get a traveler form
