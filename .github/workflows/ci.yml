name: "CI/CD Workflow"

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      api: ${{ steps.filter.outputs.api }}
      web: ${{ steps.filter.outputs.web }}
      infra: ${{ steps.filter.outputs.infra }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Paths Changes Filter
        uses: dorny/paths-filter@v2.11.1
        id: filter
        with:
          filters: |
            api:
              - 'packages/api/src/**'
            web:
              - 'packages/web/src/**'
            infra:
              - 'infrastructure/**'
  test:
    needs: changes
    if: ${{ needs.changes.outputs.api == 'true' || needs.changes.outputs.web == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"
          cache: "yarn"
      - name: Install dependencies
        run: yarn --frozen-lockfile --prefer-offline
      - name: Test api
        run: yarn api:test
        if: ${{ needs.changes.outputs.api == 'true' }}
      - name: Test web
        run: yarn web:test
        if: ${{ needs.changes.outputs.web == 'true' }}

  build:
    needs: changes
    runs-on: ubuntu-latest
    if: ${{ needs.changes.outputs.api == 'true' || needs.changes.outputs.web == 'true' }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "18"
          cache: "yarn"
      - name: Install dependencies
        run: yarn --frozen-lockfile --prefer-offline
      - name: Build web
        run: yarn build:web
        if: ${{ needs.changes.outputs.web == 'true' }}
      - name: Build api
        run: yarn build:api
        if: ${{ needs.changes.outputs.api == 'true' }}

  deploy:
    needs:
      - changes
      - build
    runs-on: ubuntu-latest
    if: needs.changes.outputs.infra == 'true' || needs.changes.outputs.web == 'true' || needs.changes.outputs.api == 'true'
    env:
      TF_VAR_AWS_REGION: $AWS_REGION
      TF_VAR_WEB_BUCKET_NAME: $WEB_BUCKET_NAME

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::272649283154:role/GitHubAction-AssumeRoleWithAction
          aws-region: eu-west-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.4.6
        if: needs.changes.outputs.infra == 'true'  || needs.changes.outputs.api == 'true'

      - name: Terraform Init
        run: terraform init
        if: needs.changes.outputs.infra == 'true'|| needs.changes.outputs.api == 'true'

      - name: Terraform Validate
        run: terraform validate
        if: needs.changes.outputs.infra == 'true'|| needs.changes.outputs.api == 'true'

      - name: Terraform Plan
        run: terraform plan
        if: needs.changes.outputs.infra == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'

      - name: Deploy Web
        run: aws s3 sync ./packages/web/build s3://${{ secrets.WEB_BUCKET_NAME }} --delete
        if: needs.changes.outputs.web == 'true' && github.event_name == 'push' && github.ref == 'refs/heads/main'
